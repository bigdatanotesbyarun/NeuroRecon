import google.generativeai as genai
from sqlalchemy import create_engine, text
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.conf import settings

# Configure Google Gemini API
GENAI_API_KEY = "your_api_key_here"
genai.configure(api_key=GENAI_API_KEY)

# Access the Django settings for database configuration
DATABASE_NAME = settings.DATABASES['default']['NAME']  # 'NAME' is the database name
DATABASE_USER = settings.DATABASES['default']['USER']  # 'USER' is the username
DATABASE_PASSWORD = settings.DATABASES['default']['PASSWORD']  # 'PASSWORD' is the password
DATABASE_HOST = settings.DATABASES['default']['HOST']  # 'HOST' is the host, e.g., 'localhost'

# Construct the PostgreSQL URL for SQLAlchemy
DATABASE_URL = f"postgresql://{DATABASE_USER}:{DATABASE_PASSWORD}@{DATABASE_HOST}/{DATABASE_NAME}"

engine = create_engine(DATABASE_URL)

def generate_sql_from_nlp(user_input):
    """
    This function sends the user's natural language query to Gemini to generate a SQL query.
    """
    try:
        # Start a chat session with Gemini
        chat_session = genai.ChatSession(model="gemini-1.5-flash")  # Replace with the appropriate model

        # Send the user's message as a prompt to generate the SQL query
        response = chat_session.chat(messages=[{'role': 'user', 'content': f"Generate a SQL query for: {user_input}"}])

        # Extract the generated SQL query from the response
        sql_query = response['messages'][0]['content'].strip()
        return sql_query
    except Exception as e:
        print(f"Error generating SQL from NLP: {str(e)}")
        return None

def execute_sql_query(sql_query):
    """
    This function executes the SQL query generated by Gemini using SQLAlchemy.
    """
    try:
        with engine.connect() as connection:
            result = connection.execute(text(sql_query))
            return result.fetchall()  # Return the query results
    except Exception as e:
        return str(e)

@api_view(['POST'])
def get_data_from_natural_language_query(request):
    """
    REST API endpoint that processes user input and returns query results.
    """
    user_input = request.data.get("message", "")
    if not user_input:
        return Response({"error": "Message is required"}, status=400)
    
    # Step 1: Generate SQL query using Gemini
    sql_query = generate_sql_from_nlp(user_input)
    
    if sql_query is None:
        return Response({"error": "Failed to generate SQL query."}, status=500)

    # Step 2: Execute the generated SQL query with SQLAlchemy
    try:
        results = execute_sql_query(sql_query)
        return Response({"query": sql_query, "results": results})
    except Exception as e:
        return Response({"error": str(e)}, status=500)
